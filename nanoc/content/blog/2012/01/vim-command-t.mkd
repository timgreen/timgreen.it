---
kind: 'article'
created_at: 2012-01-20 21:30:31 +8
title: 'Vim commandT'
tags: [vim]
publish: true
---
随着公司 repo 中代码量的增长, 在 vim 里面要找到一个文件是越来越难了. [NERDTree][] 自然是必不可少的, 但对于过深的子目录还是无能为力. Search 了一番, 最后在[这里](http://stevelosh.com/blog/2010/09/coming-home-to-vim/#peepopen)找里了 [CommandT][]

## CommandT

作者的简介

> The Command-T plug-in for VIM provides an extremely fast, intuitive mechanism for opening files with a minimal number of keystrokes. It's named "Command-T" because it is inspired by the "Go to File" window bound to Command-T in TextMate.
>
> Files are selected by typing characters that appear in their paths, and are ordered by an algorithm which knows that characters that appear in certain locations (for example, immediately after a path separator) should be given more weight.

具体功能可以到[项目主页][CommandT]围观 Live demonstration, 或安装后 `:h :CommandT`

## Install CommandT

   * Vim 需要有 Ruby support. 执行 `vim --version` 查看是否有 +ruby 选项. 如果需要自己编译 vim, 请走[传送门][CompileVim].
   * 推荐以 pathogen bundle 安装, 详见 [doc](http://git.wincent.com/command-t.git/blob_plain/HEAD:/doc/command-t.txt) 中的 "MANAGING USING PATHOGEN".
   * 安装后要记得在 *~/.vim/bundle/command-t* 执行 `rake make` 来编译 c extension.

## Config CommandT (with NERDTree)

作为一个配置控, 安装完成远远不是结束, 现在正文开始 ^\_^

### layout

CommandT 的 __Match Window__ default 是在 bottom 的. 使用的时候, 随着输入关键字的变化, window size 也在不停的变化, 于是就看到 highlight 的第一行在那里上下狂跳(囧).

help 了一下, 发现了选项 `g:CommandTMatchWindowAtTop`

所以在 *vimrc* 中加上

{:lang="vim"}
    let g:CommandTMatchWindowAtTop = 1

ps: 另外还有一个选项 `g:ommandTMatchWindowReverse`, 依然保持 __Match Window__ 在 bottom, 但将 list 倒过来应该也会有人喜欢.

### shortcut command

然后快捷键也是必需的. 我要的效果是用快捷键呼出 __CommandT__ 时:

* 如果当前正在编辑文件, __CommandT__ 的 root 设为文件所在的目录
* 如果当前正在 NERDTree 中, 就将 __CommandT__ 的 root 设为当前 NERDTree 的 root.

因为我设置了 `set autochdir`(`:h autochdir`), 所以对于第一种情况, 直接`:CommandT`就可以了.

对于第二种情况, help 了一下找到一个变量`b:NERDTreeRoot`可以用, 所以合在一起就是

{:lang="vim"}
    "" Command-T
    function SmartCommandT()
      if exists("b:NERDTreeRoot")
        exec 'CommandT ' . b:NERDTreeRoot.path.str()
      else
        CommandT
      endif
    endfunction

再那这个function `map`到喜欢的 key 上就大功告成了.

### (option) keymap in NERDTree

在翻 NERDTree 的 help 时看到, 还可以对 NERDTree 的 node 加 action, e.g.

{:lang="vim"}
    call NERDTreeAddKeyMap({
        \ 'key': 'f',
        \ 'callback': 'CommandTCurrentNERDTreeNode',
        \ 'quickhelpText': 'CommandT on current node' })

    function! CommandTCurrentNERDTreeNode()
      let n = g:NERDTreeDirNode.GetSelected()
      if n != {}
        exec 'CommandT ' . n.path.str()
      endif
    endfunction

在光标在 NERDTree 的 dirnode 上时, 按<kbd>f</kbd>, 就可以在选中的目录上打开 __CommandT__.

## Usage

呼出 CommandT 后, 就可以通过输入对选中目录中的文件进行过滤.

![commandT](http://pic.yupoo.com/timgreen/BIEIYRQi/medish.jpg)

![filter with commandT](http://pic.yupoo.com/timgreen/BIEIZ8nj/medish.jpg)

### Common Shortcuts

<kbd>Ctrl</kbd>+<kbd>u</kbd>
: 清空 __Prompt__ 栏

<kbd>Enter</kbd>
: 打开选中的文件

<kbd>Ctrl</kbd>+<kbd>Enter</kbd>, <kbd>Ctrl</kbd>+<kbd>s</kbd>
: 在分割窗口中打开选中的文件

<kbd>Ctrl</kbd>+<kbd>v</kbd>
: 在垂直分割窗口中打开选中的文件

<kbd>Ctrl</kbd>+<kbd>t</kbd>
: 在新Tab中打开选中的文件

<kbd>Ctrl</kbd>+<kbd>j</kbd>, <kbd>Ctrl</kbd>+<kbd>n</kbd>, <kbd>Down</kbd>
: 选择 __Match Window__ 中的下一个文件

<kbd>Ctrl</kbd>+<kbd>k</kbd>, <kbd>Ctrl</kbd>+<kbd>p</kbd>, <kbd>Up</kbd>
: 选择 __Match Window__ 中的上一个文件

<kbd>Ctrl</kbd>+<kbd>c</kbd>, <kbd>Esc</kbd>
: Cancel

[NERDTree]: https://github.com/scrooloose/nerdtree
[CommandT]: https://wincent.com/products/command-t
[CompileVim]: http://stackoverflow.com/questions/3794895/installing-vim-with-ruby-support-ruby
